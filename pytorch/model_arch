# CNN2
Trainer(
  (model): CNN2(
    (conv_1): BasicConv2d(
      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv_2): BasicConv2d(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv_3): BasicConv2d(
      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv_4): BasicConv2d(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv_5): BasicConv2d(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(512, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (fc): Linear(in_features=512, out_features=8, bias=True)
  )
  (criterion): CrossEntropyLoss()
)

model.conv_1.conv.weight : torch.Size([32, 3, 3, 3])
model.conv_1.bn.weight : torch.Size([32])
model.conv_1.bn.bias : torch.Size([32])
model.conv_2.conv.weight : torch.Size([64, 32, 3, 3])
model.conv_2.bn.weight : torch.Size([64])
model.conv_2.bn.bias : torch.Size([64])
model.conv_3.conv.weight : torch.Size([128, 64, 3, 3])
model.conv_3.bn.weight : torch.Size([128])
model.conv_3.bn.bias : torch.Size([128])
model.conv_4.conv.weight : torch.Size([256, 128, 3, 3])
model.conv_4.bn.weight : torch.Size([256])
model.conv_4.bn.bias : torch.Size([256])
model.conv_5.conv.weight : torch.Size([512, 256, 3, 3])
model.conv_5.bn.weight : torch.Size([512])
model.conv_5.bn.bias : torch.Size([512])
model.fc.weight : torch.Size([8, 512])
model.fc.bias : torch.Size([8])


# Inception_no-pretrain_full
Trainer(
  (model): Inception(
    (main_bone): Inception3(
      (Conv2d_1a_3x3): BasicConv2d(
        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (Conv2d_2a_3x3): BasicConv2d(
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (Conv2d_2b_3x3): BasicConv2d(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
      (Conv2d_3b_1x1): BasicConv2d(
        (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (Conv2d_4a_3x3): BasicConv2d(
        (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
      (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
      (Mixed_5b): InceptionA(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch5x5_1): BasicConv2d(
          (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch5x5_2): BasicConv2d(
          (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_1): BasicConv2d(
          (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_2): BasicConv2d(
          (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3): BasicConv2d(
          (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_5c): InceptionA(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch5x5_1): BasicConv2d(
          (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch5x5_2): BasicConv2d(
          (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_1): BasicConv2d(
          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_2): BasicConv2d(
          (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3): BasicConv2d(
          (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_5d): InceptionA(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch5x5_1): BasicConv2d(
          (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch5x5_2): BasicConv2d(
          (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_1): BasicConv2d(
          (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_2): BasicConv2d(
          (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3): BasicConv2d(
          (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_6a): InceptionB(
        (branch3x3): BasicConv2d(
          (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_1): BasicConv2d(
          (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_2): BasicConv2d(
          (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3): BasicConv2d(
          (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_6b): InceptionC(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_1): BasicConv2d(
          (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_2): BasicConv2d(
          (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_3): BasicConv2d(
          (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_1): BasicConv2d(
          (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_2): BasicConv2d(
          (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_3): BasicConv2d(
          (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_4): BasicConv2d(
          (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_5): BasicConv2d(
          (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_6c): InceptionC(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_1): BasicConv2d(
          (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_2): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_3): BasicConv2d(
          (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_1): BasicConv2d(
          (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_2): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_3): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_4): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_5): BasicConv2d(
          (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_6d): InceptionC(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_1): BasicConv2d(
          (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_2): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_3): BasicConv2d(
          (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_1): BasicConv2d(
          (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_2): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_3): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_4): BasicConv2d(
          (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_5): BasicConv2d(
          (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_6e): InceptionC(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_2): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7_3): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_2): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_3): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_4): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7dbl_5): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_7a): InceptionD(
        (branch3x3_1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_2): BasicConv2d(
          (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7x3_1): BasicConv2d(
          (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7x3_2): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7x3_3): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch7x7x3_4): BasicConv2d(
          (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_7b): InceptionE(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_1): BasicConv2d(
          (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_2a): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_2b): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_1): BasicConv2d(
          (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_2): BasicConv2d(
          (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3a): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3b): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (Mixed_7c): InceptionE(
        (branch1x1): BasicConv2d(
          (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_1): BasicConv2d(
          (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_2a): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3_2b): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_1): BasicConv2d(
          (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_2): BasicConv2d(
          (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3a): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch3x3dbl_3b): BasicConv2d(
          (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
        (branch_pool): BasicConv2d(
          (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (dropout): Dropout(p=0.5, inplace=False)
      (fc): Linear(in_features=2048, out_features=8, bias=True)
    )
  )
  (criterion): CrossEntropyLoss()
)

model.main_bone.Conv2d_1a_3x3.conv.weight : torch.Size([32, 3, 3, 3])
model.main_bone.Conv2d_1a_3x3.bn.weight : torch.Size([32])
model.main_bone.Conv2d_1a_3x3.bn.bias : torch.Size([32])
model.main_bone.Conv2d_2a_3x3.conv.weight : torch.Size([32, 32, 3, 3])
model.main_bone.Conv2d_2a_3x3.bn.weight : torch.Size([32])
model.main_bone.Conv2d_2a_3x3.bn.bias : torch.Size([32])
model.main_bone.Conv2d_2b_3x3.conv.weight : torch.Size([64, 32, 3, 3])
model.main_bone.Conv2d_2b_3x3.bn.weight : torch.Size([64])
model.main_bone.Conv2d_2b_3x3.bn.bias : torch.Size([64])
model.main_bone.Conv2d_3b_1x1.conv.weight : torch.Size([80, 64, 1, 1])
model.main_bone.Conv2d_3b_1x1.bn.weight : torch.Size([80])
model.main_bone.Conv2d_3b_1x1.bn.bias : torch.Size([80])
model.main_bone.Conv2d_4a_3x3.conv.weight : torch.Size([192, 80, 3, 3])
model.main_bone.Conv2d_4a_3x3.bn.weight : torch.Size([192])
model.main_bone.Conv2d_4a_3x3.bn.bias : torch.Size([192])
model.main_bone.Mixed_5b.branch1x1.conv.weight : torch.Size([64, 192, 1, 1])
model.main_bone.Mixed_5b.branch1x1.bn.weight : torch.Size([64])
model.main_bone.Mixed_5b.branch1x1.bn.bias : torch.Size([64])
model.main_bone.Mixed_5b.branch5x5_1.conv.weight : torch.Size([48, 192, 1, 1])
model.main_bone.Mixed_5b.branch5x5_1.bn.weight : torch.Size([48])
model.main_bone.Mixed_5b.branch5x5_1.bn.bias : torch.Size([48])
model.main_bone.Mixed_5b.branch5x5_2.conv.weight : torch.Size([64, 48, 5, 5])
model.main_bone.Mixed_5b.branch5x5_2.bn.weight : torch.Size([64])
model.main_bone.Mixed_5b.branch5x5_2.bn.bias : torch.Size([64])
model.main_bone.Mixed_5b.branch3x3dbl_1.conv.weight : torch.Size([64, 192, 1, 1])
model.main_bone.Mixed_5b.branch3x3dbl_1.bn.weight : torch.Size([64])
model.main_bone.Mixed_5b.branch3x3dbl_1.bn.bias : torch.Size([64])
model.main_bone.Mixed_5b.branch3x3dbl_2.conv.weight : torch.Size([96, 64, 3, 3])
model.main_bone.Mixed_5b.branch3x3dbl_2.bn.weight : torch.Size([96])
model.main_bone.Mixed_5b.branch3x3dbl_2.bn.bias : torch.Size([96])
model.main_bone.Mixed_5b.branch3x3dbl_3.conv.weight : torch.Size([96, 96, 3, 3])
model.main_bone.Mixed_5b.branch3x3dbl_3.bn.weight : torch.Size([96])
model.main_bone.Mixed_5b.branch3x3dbl_3.bn.bias : torch.Size([96])
model.main_bone.Mixed_5b.branch_pool.conv.weight : torch.Size([32, 192, 1, 1])
model.main_bone.Mixed_5b.branch_pool.bn.weight : torch.Size([32])
model.main_bone.Mixed_5b.branch_pool.bn.bias : torch.Size([32])
model.main_bone.Mixed_5c.branch1x1.conv.weight : torch.Size([64, 256, 1, 1])
model.main_bone.Mixed_5c.branch1x1.bn.weight : torch.Size([64])
model.main_bone.Mixed_5c.branch1x1.bn.bias : torch.Size([64])
model.main_bone.Mixed_5c.branch5x5_1.conv.weight : torch.Size([48, 256, 1, 1])
model.main_bone.Mixed_5c.branch5x5_1.bn.weight : torch.Size([48])
model.main_bone.Mixed_5c.branch5x5_1.bn.bias : torch.Size([48])
model.main_bone.Mixed_5c.branch5x5_2.conv.weight : torch.Size([64, 48, 5, 5])
model.main_bone.Mixed_5c.branch5x5_2.bn.weight : torch.Size([64])
model.main_bone.Mixed_5c.branch5x5_2.bn.bias : torch.Size([64])
model.main_bone.Mixed_5c.branch3x3dbl_1.conv.weight : torch.Size([64, 256, 1, 1])
model.main_bone.Mixed_5c.branch3x3dbl_1.bn.weight : torch.Size([64])
model.main_bone.Mixed_5c.branch3x3dbl_1.bn.bias : torch.Size([64])
model.main_bone.Mixed_5c.branch3x3dbl_2.conv.weight : torch.Size([96, 64, 3, 3])
model.main_bone.Mixed_5c.branch3x3dbl_2.bn.weight : torch.Size([96])
model.main_bone.Mixed_5c.branch3x3dbl_2.bn.bias : torch.Size([96])
model.main_bone.Mixed_5c.branch3x3dbl_3.conv.weight : torch.Size([96, 96, 3, 3])
model.main_bone.Mixed_5c.branch3x3dbl_3.bn.weight : torch.Size([96])
model.main_bone.Mixed_5c.branch3x3dbl_3.bn.bias : torch.Size([96])
model.main_bone.Mixed_5c.branch_pool.conv.weight : torch.Size([64, 256, 1, 1])
model.main_bone.Mixed_5c.branch_pool.bn.weight : torch.Size([64])
model.main_bone.Mixed_5c.branch_pool.bn.bias : torch.Size([64])
model.main_bone.Mixed_5d.branch1x1.conv.weight : torch.Size([64, 288, 1, 1])
model.main_bone.Mixed_5d.branch1x1.bn.weight : torch.Size([64])
model.main_bone.Mixed_5d.branch1x1.bn.bias : torch.Size([64])
model.main_bone.Mixed_5d.branch5x5_1.conv.weight : torch.Size([48, 288, 1, 1])
model.main_bone.Mixed_5d.branch5x5_1.bn.weight : torch.Size([48])
model.main_bone.Mixed_5d.branch5x5_1.bn.bias : torch.Size([48])
model.main_bone.Mixed_5d.branch5x5_2.conv.weight : torch.Size([64, 48, 5, 5])
model.main_bone.Mixed_5d.branch5x5_2.bn.weight : torch.Size([64])
model.main_bone.Mixed_5d.branch5x5_2.bn.bias : torch.Size([64])
model.main_bone.Mixed_5d.branch3x3dbl_1.conv.weight : torch.Size([64, 288, 1, 1])
model.main_bone.Mixed_5d.branch3x3dbl_1.bn.weight : torch.Size([64])
model.main_bone.Mixed_5d.branch3x3dbl_1.bn.bias : torch.Size([64])
model.main_bone.Mixed_5d.branch3x3dbl_2.conv.weight : torch.Size([96, 64, 3, 3])
model.main_bone.Mixed_5d.branch3x3dbl_2.bn.weight : torch.Size([96])
model.main_bone.Mixed_5d.branch3x3dbl_2.bn.bias : torch.Size([96])
model.main_bone.Mixed_5d.branch3x3dbl_3.conv.weight : torch.Size([96, 96, 3, 3])
model.main_bone.Mixed_5d.branch3x3dbl_3.bn.weight : torch.Size([96])
model.main_bone.Mixed_5d.branch3x3dbl_3.bn.bias : torch.Size([96])
model.main_bone.Mixed_5d.branch_pool.conv.weight : torch.Size([64, 288, 1, 1])
model.main_bone.Mixed_5d.branch_pool.bn.weight : torch.Size([64])
model.main_bone.Mixed_5d.branch_pool.bn.bias : torch.Size([64])
model.main_bone.Mixed_6a.branch3x3.conv.weight : torch.Size([384, 288, 3, 3])
model.main_bone.Mixed_6a.branch3x3.bn.weight : torch.Size([384])
model.main_bone.Mixed_6a.branch3x3.bn.bias : torch.Size([384])
model.main_bone.Mixed_6a.branch3x3dbl_1.conv.weight : torch.Size([64, 288, 1, 1])
model.main_bone.Mixed_6a.branch3x3dbl_1.bn.weight : torch.Size([64])
model.main_bone.Mixed_6a.branch3x3dbl_1.bn.bias : torch.Size([64])
model.main_bone.Mixed_6a.branch3x3dbl_2.conv.weight : torch.Size([96, 64, 3, 3])
model.main_bone.Mixed_6a.branch3x3dbl_2.bn.weight : torch.Size([96])
model.main_bone.Mixed_6a.branch3x3dbl_2.bn.bias : torch.Size([96])
model.main_bone.Mixed_6a.branch3x3dbl_3.conv.weight : torch.Size([96, 96, 3, 3])
model.main_bone.Mixed_6a.branch3x3dbl_3.bn.weight : torch.Size([96])
model.main_bone.Mixed_6a.branch3x3dbl_3.bn.bias : torch.Size([96])
model.main_bone.Mixed_6b.branch1x1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6b.branch1x1.bn.weight : torch.Size([192])
model.main_bone.Mixed_6b.branch1x1.bn.bias : torch.Size([192])
model.main_bone.Mixed_6b.branch7x7_1.conv.weight : torch.Size([128, 768, 1, 1])
model.main_bone.Mixed_6b.branch7x7_1.bn.weight : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7_1.bn.bias : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7_2.conv.weight : torch.Size([128, 128, 1, 7])
model.main_bone.Mixed_6b.branch7x7_2.bn.weight : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7_2.bn.bias : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7_3.conv.weight : torch.Size([192, 128, 7, 1])
model.main_bone.Mixed_6b.branch7x7_3.bn.weight : torch.Size([192])
model.main_bone.Mixed_6b.branch7x7_3.bn.bias : torch.Size([192])
model.main_bone.Mixed_6b.branch7x7dbl_1.conv.weight : torch.Size([128, 768, 1, 1])
model.main_bone.Mixed_6b.branch7x7dbl_1.bn.weight : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_1.bn.bias : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_2.conv.weight : torch.Size([128, 128, 7, 1])
model.main_bone.Mixed_6b.branch7x7dbl_2.bn.weight : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_2.bn.bias : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_3.conv.weight : torch.Size([128, 128, 1, 7])
model.main_bone.Mixed_6b.branch7x7dbl_3.bn.weight : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_3.bn.bias : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_4.conv.weight : torch.Size([128, 128, 7, 1])
model.main_bone.Mixed_6b.branch7x7dbl_4.bn.weight : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_4.bn.bias : torch.Size([128])
model.main_bone.Mixed_6b.branch7x7dbl_5.conv.weight : torch.Size([192, 128, 1, 7])
model.main_bone.Mixed_6b.branch7x7dbl_5.bn.weight : torch.Size([192])
model.main_bone.Mixed_6b.branch7x7dbl_5.bn.bias : torch.Size([192])
model.main_bone.Mixed_6b.branch_pool.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6b.branch_pool.bn.weight : torch.Size([192])
model.main_bone.Mixed_6b.branch_pool.bn.bias : torch.Size([192])
model.main_bone.Mixed_6c.branch1x1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6c.branch1x1.bn.weight : torch.Size([192])
model.main_bone.Mixed_6c.branch1x1.bn.bias : torch.Size([192])
model.main_bone.Mixed_6c.branch7x7_1.conv.weight : torch.Size([160, 768, 1, 1])
model.main_bone.Mixed_6c.branch7x7_1.bn.weight : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7_1.bn.bias : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7_2.conv.weight : torch.Size([160, 160, 1, 7])
model.main_bone.Mixed_6c.branch7x7_2.bn.weight : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7_2.bn.bias : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7_3.conv.weight : torch.Size([192, 160, 7, 1])
model.main_bone.Mixed_6c.branch7x7_3.bn.weight : torch.Size([192])
model.main_bone.Mixed_6c.branch7x7_3.bn.bias : torch.Size([192])
model.main_bone.Mixed_6c.branch7x7dbl_1.conv.weight : torch.Size([160, 768, 1, 1])
model.main_bone.Mixed_6c.branch7x7dbl_1.bn.weight : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_1.bn.bias : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_2.conv.weight : torch.Size([160, 160, 7, 1])
model.main_bone.Mixed_6c.branch7x7dbl_2.bn.weight : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_2.bn.bias : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_3.conv.weight : torch.Size([160, 160, 1, 7])
model.main_bone.Mixed_6c.branch7x7dbl_3.bn.weight : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_3.bn.bias : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_4.conv.weight : torch.Size([160, 160, 7, 1])
model.main_bone.Mixed_6c.branch7x7dbl_4.bn.weight : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_4.bn.bias : torch.Size([160])
model.main_bone.Mixed_6c.branch7x7dbl_5.conv.weight : torch.Size([192, 160, 1, 7])
model.main_bone.Mixed_6c.branch7x7dbl_5.bn.weight : torch.Size([192])
model.main_bone.Mixed_6c.branch7x7dbl_5.bn.bias : torch.Size([192])
model.main_bone.Mixed_6c.branch_pool.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6c.branch_pool.bn.weight : torch.Size([192])
model.main_bone.Mixed_6c.branch_pool.bn.bias : torch.Size([192])
model.main_bone.Mixed_6d.branch1x1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6d.branch1x1.bn.weight : torch.Size([192])
model.main_bone.Mixed_6d.branch1x1.bn.bias : torch.Size([192])
model.main_bone.Mixed_6d.branch7x7_1.conv.weight : torch.Size([160, 768, 1, 1])
model.main_bone.Mixed_6d.branch7x7_1.bn.weight : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7_1.bn.bias : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7_2.conv.weight : torch.Size([160, 160, 1, 7])
model.main_bone.Mixed_6d.branch7x7_2.bn.weight : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7_2.bn.bias : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7_3.conv.weight : torch.Size([192, 160, 7, 1])
model.main_bone.Mixed_6d.branch7x7_3.bn.weight : torch.Size([192])
model.main_bone.Mixed_6d.branch7x7_3.bn.bias : torch.Size([192])
model.main_bone.Mixed_6d.branch7x7dbl_1.conv.weight : torch.Size([160, 768, 1, 1])
model.main_bone.Mixed_6d.branch7x7dbl_1.bn.weight : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_1.bn.bias : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_2.conv.weight : torch.Size([160, 160, 7, 1])
model.main_bone.Mixed_6d.branch7x7dbl_2.bn.weight : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_2.bn.bias : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_3.conv.weight : torch.Size([160, 160, 1, 7])
model.main_bone.Mixed_6d.branch7x7dbl_3.bn.weight : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_3.bn.bias : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_4.conv.weight : torch.Size([160, 160, 7, 1])
model.main_bone.Mixed_6d.branch7x7dbl_4.bn.weight : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_4.bn.bias : torch.Size([160])
model.main_bone.Mixed_6d.branch7x7dbl_5.conv.weight : torch.Size([192, 160, 1, 7])
model.main_bone.Mixed_6d.branch7x7dbl_5.bn.weight : torch.Size([192])
model.main_bone.Mixed_6d.branch7x7dbl_5.bn.bias : torch.Size([192])
model.main_bone.Mixed_6d.branch_pool.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6d.branch_pool.bn.weight : torch.Size([192])
model.main_bone.Mixed_6d.branch_pool.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch1x1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6e.branch1x1.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch1x1.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7_1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6e.branch7x7_1.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7_1.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7_2.conv.weight : torch.Size([192, 192, 1, 7])
model.main_bone.Mixed_6e.branch7x7_2.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7_2.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7_3.conv.weight : torch.Size([192, 192, 7, 1])
model.main_bone.Mixed_6e.branch7x7_3.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7_3.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6e.branch7x7dbl_1.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_1.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_2.conv.weight : torch.Size([192, 192, 7, 1])
model.main_bone.Mixed_6e.branch7x7dbl_2.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_2.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_3.conv.weight : torch.Size([192, 192, 1, 7])
model.main_bone.Mixed_6e.branch7x7dbl_3.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_3.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_4.conv.weight : torch.Size([192, 192, 7, 1])
model.main_bone.Mixed_6e.branch7x7dbl_4.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_4.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_5.conv.weight : torch.Size([192, 192, 1, 7])
model.main_bone.Mixed_6e.branch7x7dbl_5.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch7x7dbl_5.bn.bias : torch.Size([192])
model.main_bone.Mixed_6e.branch_pool.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_6e.branch_pool.bn.weight : torch.Size([192])
model.main_bone.Mixed_6e.branch_pool.bn.bias : torch.Size([192])
model.main_bone.Mixed_7a.branch3x3_1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_7a.branch3x3_1.bn.weight : torch.Size([192])
model.main_bone.Mixed_7a.branch3x3_1.bn.bias : torch.Size([192])
model.main_bone.Mixed_7a.branch3x3_2.conv.weight : torch.Size([320, 192, 3, 3])
model.main_bone.Mixed_7a.branch3x3_2.bn.weight : torch.Size([320])
model.main_bone.Mixed_7a.branch3x3_2.bn.bias : torch.Size([320])
model.main_bone.Mixed_7a.branch7x7x3_1.conv.weight : torch.Size([192, 768, 1, 1])
model.main_bone.Mixed_7a.branch7x7x3_1.bn.weight : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_1.bn.bias : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_2.conv.weight : torch.Size([192, 192, 1, 7])
model.main_bone.Mixed_7a.branch7x7x3_2.bn.weight : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_2.bn.bias : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_3.conv.weight : torch.Size([192, 192, 7, 1])
model.main_bone.Mixed_7a.branch7x7x3_3.bn.weight : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_3.bn.bias : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_4.conv.weight : torch.Size([192, 192, 3, 3])
model.main_bone.Mixed_7a.branch7x7x3_4.bn.weight : torch.Size([192])
model.main_bone.Mixed_7a.branch7x7x3_4.bn.bias : torch.Size([192])
model.main_bone.Mixed_7b.branch1x1.conv.weight : torch.Size([320, 1280, 1, 1])
model.main_bone.Mixed_7b.branch1x1.bn.weight : torch.Size([320])
model.main_bone.Mixed_7b.branch1x1.bn.bias : torch.Size([320])
model.main_bone.Mixed_7b.branch3x3_1.conv.weight : torch.Size([384, 1280, 1, 1])
model.main_bone.Mixed_7b.branch3x3_1.bn.weight : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3_1.bn.bias : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3_2a.conv.weight : torch.Size([384, 384, 1, 3])
model.main_bone.Mixed_7b.branch3x3_2a.bn.weight : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3_2a.bn.bias : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3_2b.conv.weight : torch.Size([384, 384, 3, 1])
model.main_bone.Mixed_7b.branch3x3_2b.bn.weight : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3_2b.bn.bias : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3dbl_1.conv.weight : torch.Size([448, 1280, 1, 1])
model.main_bone.Mixed_7b.branch3x3dbl_1.bn.weight : torch.Size([448])
model.main_bone.Mixed_7b.branch3x3dbl_1.bn.bias : torch.Size([448])
model.main_bone.Mixed_7b.branch3x3dbl_2.conv.weight : torch.Size([384, 448, 3, 3])
model.main_bone.Mixed_7b.branch3x3dbl_2.bn.weight : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3dbl_2.bn.bias : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3dbl_3a.conv.weight : torch.Size([384, 384, 1, 3])
model.main_bone.Mixed_7b.branch3x3dbl_3a.bn.weight : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3dbl_3a.bn.bias : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3dbl_3b.conv.weight : torch.Size([384, 384, 3, 1])
model.main_bone.Mixed_7b.branch3x3dbl_3b.bn.weight : torch.Size([384])
model.main_bone.Mixed_7b.branch3x3dbl_3b.bn.bias : torch.Size([384])
model.main_bone.Mixed_7b.branch_pool.conv.weight : torch.Size([192, 1280, 1, 1])
model.main_bone.Mixed_7b.branch_pool.bn.weight : torch.Size([192])
model.main_bone.Mixed_7b.branch_pool.bn.bias : torch.Size([192])
model.main_bone.Mixed_7c.branch1x1.conv.weight : torch.Size([320, 2048, 1, 1])
model.main_bone.Mixed_7c.branch1x1.bn.weight : torch.Size([320])
model.main_bone.Mixed_7c.branch1x1.bn.bias : torch.Size([320])
model.main_bone.Mixed_7c.branch3x3_1.conv.weight : torch.Size([384, 2048, 1, 1])
model.main_bone.Mixed_7c.branch3x3_1.bn.weight : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3_1.bn.bias : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3_2a.conv.weight : torch.Size([384, 384, 1, 3])
model.main_bone.Mixed_7c.branch3x3_2a.bn.weight : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3_2a.bn.bias : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3_2b.conv.weight : torch.Size([384, 384, 3, 1])
model.main_bone.Mixed_7c.branch3x3_2b.bn.weight : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3_2b.bn.bias : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3dbl_1.conv.weight : torch.Size([448, 2048, 1, 1])
model.main_bone.Mixed_7c.branch3x3dbl_1.bn.weight : torch.Size([448])
model.main_bone.Mixed_7c.branch3x3dbl_1.bn.bias : torch.Size([448])
model.main_bone.Mixed_7c.branch3x3dbl_2.conv.weight : torch.Size([384, 448, 3, 3])
model.main_bone.Mixed_7c.branch3x3dbl_2.bn.weight : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3dbl_2.bn.bias : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3dbl_3a.conv.weight : torch.Size([384, 384, 1, 3])
model.main_bone.Mixed_7c.branch3x3dbl_3a.bn.weight : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3dbl_3a.bn.bias : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3dbl_3b.conv.weight : torch.Size([384, 384, 3, 1])
model.main_bone.Mixed_7c.branch3x3dbl_3b.bn.weight : torch.Size([384])
model.main_bone.Mixed_7c.branch3x3dbl_3b.bn.bias : torch.Size([384])
model.main_bone.Mixed_7c.branch_pool.conv.weight : torch.Size([192, 2048, 1, 1])
model.main_bone.Mixed_7c.branch_pool.bn.weight : torch.Size([192])
model.main_bone.Mixed_7c.branch_pool.bn.bias : torch.Size([192])
model.main_bone.fc.weight : torch.Size([8, 2048])
model.main_bone.fc.bias : torch.Size([8])


# GoogleNet
Trainer(
  (model): GoogleNet(
    (input_net): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (inception_blocks): Sequential(
      (0): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 8, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (1): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 12, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(64, 12, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (2): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (3): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 12, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(96, 12, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (4): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (5): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (6): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 24, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (7): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (8): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(128, 48, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(48, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
      (9): InceptionBlock(
        (conv_1x1): Sequential(
          (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (conv_3x3): Sequential(
          (0): Conv2d(128, 48, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(48, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (conv_5x5): Sequential(
          (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (max_pool): Sequential(
          (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
          (1): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
      )
    )
    (output_net): Sequential(
      (0): AdaptiveAvgPool2d(output_size=(1, 1))
      (1): Flatten()
      (2): Linear(in_features=128, out_features=8, bias=True)
    )
  )
  (criterion): CrossEntropyLoss()
)

model.input_net.0.weight : torch.Size([64, 3, 3, 3])
model.input_net.0.bias : torch.Size([64])
model.input_net.1.weight : torch.Size([64])
model.input_net.1.bias : torch.Size([64])
model.inception_blocks.0.conv_1x1.0.weight : torch.Size([16, 64, 1, 1])
model.inception_blocks.0.conv_1x1.0.bias : torch.Size([16])
model.inception_blocks.0.conv_1x1.1.weight : torch.Size([16])
model.inception_blocks.0.conv_1x1.1.bias : torch.Size([16])
model.inception_blocks.0.conv_3x3.0.weight : torch.Size([32, 64, 1, 1])
model.inception_blocks.0.conv_3x3.0.bias : torch.Size([32])
model.inception_blocks.0.conv_3x3.1.weight : torch.Size([32])
model.inception_blocks.0.conv_3x3.1.bias : torch.Size([32])
model.inception_blocks.0.conv_3x3.3.weight : torch.Size([32, 32, 3, 3])
model.inception_blocks.0.conv_3x3.3.bias : torch.Size([32])
model.inception_blocks.0.conv_3x3.4.weight : torch.Size([32])
model.inception_blocks.0.conv_3x3.4.bias : torch.Size([32])
model.inception_blocks.0.conv_5x5.0.weight : torch.Size([16, 64, 1, 1])
model.inception_blocks.0.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.0.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.0.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.0.conv_5x5.3.weight : torch.Size([8, 16, 5, 5])
model.inception_blocks.0.conv_5x5.3.bias : torch.Size([8])
model.inception_blocks.0.conv_5x5.4.weight : torch.Size([8])
model.inception_blocks.0.conv_5x5.4.bias : torch.Size([8])
model.inception_blocks.0.max_pool.1.weight : torch.Size([8, 64, 1, 1])
model.inception_blocks.0.max_pool.1.bias : torch.Size([8])
model.inception_blocks.0.max_pool.2.weight : torch.Size([8])
model.inception_blocks.0.max_pool.2.bias : torch.Size([8])
model.inception_blocks.1.conv_1x1.0.weight : torch.Size([24, 64, 1, 1])
model.inception_blocks.1.conv_1x1.0.bias : torch.Size([24])
model.inception_blocks.1.conv_1x1.1.weight : torch.Size([24])
model.inception_blocks.1.conv_1x1.1.bias : torch.Size([24])
model.inception_blocks.1.conv_3x3.0.weight : torch.Size([32, 64, 1, 1])
model.inception_blocks.1.conv_3x3.0.bias : torch.Size([32])
model.inception_blocks.1.conv_3x3.1.weight : torch.Size([32])
model.inception_blocks.1.conv_3x3.1.bias : torch.Size([32])
model.inception_blocks.1.conv_3x3.3.weight : torch.Size([48, 32, 3, 3])
model.inception_blocks.1.conv_3x3.3.bias : torch.Size([48])
model.inception_blocks.1.conv_3x3.4.weight : torch.Size([48])
model.inception_blocks.1.conv_3x3.4.bias : torch.Size([48])
model.inception_blocks.1.conv_5x5.0.weight : torch.Size([16, 64, 1, 1])
model.inception_blocks.1.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.1.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.1.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.1.conv_5x5.3.weight : torch.Size([12, 16, 5, 5])
model.inception_blocks.1.conv_5x5.3.bias : torch.Size([12])
model.inception_blocks.1.conv_5x5.4.weight : torch.Size([12])
model.inception_blocks.1.conv_5x5.4.bias : torch.Size([12])
model.inception_blocks.1.max_pool.1.weight : torch.Size([12, 64, 1, 1])
model.inception_blocks.1.max_pool.1.bias : torch.Size([12])
model.inception_blocks.1.max_pool.2.weight : torch.Size([12])
model.inception_blocks.1.max_pool.2.bias : torch.Size([12])
model.inception_blocks.3.conv_1x1.0.weight : torch.Size([24, 96, 1, 1])
model.inception_blocks.3.conv_1x1.0.bias : torch.Size([24])
model.inception_blocks.3.conv_1x1.1.weight : torch.Size([24])
model.inception_blocks.3.conv_1x1.1.bias : torch.Size([24])
model.inception_blocks.3.conv_3x3.0.weight : torch.Size([32, 96, 1, 1])
model.inception_blocks.3.conv_3x3.0.bias : torch.Size([32])
model.inception_blocks.3.conv_3x3.1.weight : torch.Size([32])
model.inception_blocks.3.conv_3x3.1.bias : torch.Size([32])
model.inception_blocks.3.conv_3x3.3.weight : torch.Size([48, 32, 3, 3])
model.inception_blocks.3.conv_3x3.3.bias : torch.Size([48])
model.inception_blocks.3.conv_3x3.4.weight : torch.Size([48])
model.inception_blocks.3.conv_3x3.4.bias : torch.Size([48])
model.inception_blocks.3.conv_5x5.0.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.3.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.3.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.3.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.3.conv_5x5.3.weight : torch.Size([12, 16, 5, 5])
model.inception_blocks.3.conv_5x5.3.bias : torch.Size([12])
model.inception_blocks.3.conv_5x5.4.weight : torch.Size([12])
model.inception_blocks.3.conv_5x5.4.bias : torch.Size([12])
model.inception_blocks.3.max_pool.1.weight : torch.Size([12, 96, 1, 1])
model.inception_blocks.3.max_pool.1.bias : torch.Size([12])
model.inception_blocks.3.max_pool.2.weight : torch.Size([12])
model.inception_blocks.3.max_pool.2.bias : torch.Size([12])
model.inception_blocks.4.conv_1x1.0.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.4.conv_1x1.0.bias : torch.Size([16])
model.inception_blocks.4.conv_1x1.1.weight : torch.Size([16])
model.inception_blocks.4.conv_1x1.1.bias : torch.Size([16])
model.inception_blocks.4.conv_3x3.0.weight : torch.Size([32, 96, 1, 1])
model.inception_blocks.4.conv_3x3.0.bias : torch.Size([32])
model.inception_blocks.4.conv_3x3.1.weight : torch.Size([32])
model.inception_blocks.4.conv_3x3.1.bias : torch.Size([32])
model.inception_blocks.4.conv_3x3.3.weight : torch.Size([48, 32, 3, 3])
model.inception_blocks.4.conv_3x3.3.bias : torch.Size([48])
model.inception_blocks.4.conv_3x3.4.weight : torch.Size([48])
model.inception_blocks.4.conv_3x3.4.bias : torch.Size([48])
model.inception_blocks.4.conv_5x5.0.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.4.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.4.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.4.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.4.conv_5x5.3.weight : torch.Size([16, 16, 5, 5])
model.inception_blocks.4.conv_5x5.3.bias : torch.Size([16])
model.inception_blocks.4.conv_5x5.4.weight : torch.Size([16])
model.inception_blocks.4.conv_5x5.4.bias : torch.Size([16])
model.inception_blocks.4.max_pool.1.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.4.max_pool.1.bias : torch.Size([16])
model.inception_blocks.4.max_pool.2.weight : torch.Size([16])
model.inception_blocks.4.max_pool.2.bias : torch.Size([16])
model.inception_blocks.5.conv_1x1.0.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.5.conv_1x1.0.bias : torch.Size([16])
model.inception_blocks.5.conv_1x1.1.weight : torch.Size([16])
model.inception_blocks.5.conv_1x1.1.bias : torch.Size([16])
model.inception_blocks.5.conv_3x3.0.weight : torch.Size([32, 96, 1, 1])
model.inception_blocks.5.conv_3x3.0.bias : torch.Size([32])
model.inception_blocks.5.conv_3x3.1.weight : torch.Size([32])
model.inception_blocks.5.conv_3x3.1.bias : torch.Size([32])
model.inception_blocks.5.conv_3x3.3.weight : torch.Size([48, 32, 3, 3])
model.inception_blocks.5.conv_3x3.3.bias : torch.Size([48])
model.inception_blocks.5.conv_3x3.4.weight : torch.Size([48])
model.inception_blocks.5.conv_3x3.4.bias : torch.Size([48])
model.inception_blocks.5.conv_5x5.0.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.5.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.5.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.5.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.5.conv_5x5.3.weight : torch.Size([16, 16, 5, 5])
model.inception_blocks.5.conv_5x5.3.bias : torch.Size([16])
model.inception_blocks.5.conv_5x5.4.weight : torch.Size([16])
model.inception_blocks.5.conv_5x5.4.bias : torch.Size([16])
model.inception_blocks.5.max_pool.1.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.5.max_pool.1.bias : torch.Size([16])
model.inception_blocks.5.max_pool.2.weight : torch.Size([16])
model.inception_blocks.5.max_pool.2.bias : torch.Size([16])
model.inception_blocks.6.conv_1x1.0.weight : torch.Size([32, 96, 1, 1])
model.inception_blocks.6.conv_1x1.0.bias : torch.Size([32])
model.inception_blocks.6.conv_1x1.1.weight : torch.Size([32])
model.inception_blocks.6.conv_1x1.1.bias : torch.Size([32])
model.inception_blocks.6.conv_3x3.0.weight : torch.Size([32, 96, 1, 1])
model.inception_blocks.6.conv_3x3.0.bias : torch.Size([32])
model.inception_blocks.6.conv_3x3.1.weight : torch.Size([32])
model.inception_blocks.6.conv_3x3.1.bias : torch.Size([32])
model.inception_blocks.6.conv_3x3.3.weight : torch.Size([48, 32, 3, 3])
model.inception_blocks.6.conv_3x3.3.bias : torch.Size([48])
model.inception_blocks.6.conv_3x3.4.weight : torch.Size([48])
model.inception_blocks.6.conv_3x3.4.bias : torch.Size([48])
model.inception_blocks.6.conv_5x5.0.weight : torch.Size([16, 96, 1, 1])
model.inception_blocks.6.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.6.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.6.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.6.conv_5x5.3.weight : torch.Size([24, 16, 5, 5])
model.inception_blocks.6.conv_5x5.3.bias : torch.Size([24])
model.inception_blocks.6.conv_5x5.4.weight : torch.Size([24])
model.inception_blocks.6.conv_5x5.4.bias : torch.Size([24])
model.inception_blocks.6.max_pool.1.weight : torch.Size([24, 96, 1, 1])
model.inception_blocks.6.max_pool.1.bias : torch.Size([24])
model.inception_blocks.6.max_pool.2.weight : torch.Size([24])
model.inception_blocks.6.max_pool.2.bias : torch.Size([24])
model.inception_blocks.8.conv_1x1.0.weight : torch.Size([32, 128, 1, 1])
model.inception_blocks.8.conv_1x1.0.bias : torch.Size([32])
model.inception_blocks.8.conv_1x1.1.weight : torch.Size([32])
model.inception_blocks.8.conv_1x1.1.bias : torch.Size([32])
model.inception_blocks.8.conv_3x3.0.weight : torch.Size([48, 128, 1, 1])
model.inception_blocks.8.conv_3x3.0.bias : torch.Size([48])
model.inception_blocks.8.conv_3x3.1.weight : torch.Size([48])
model.inception_blocks.8.conv_3x3.1.bias : torch.Size([48])
model.inception_blocks.8.conv_3x3.3.weight : torch.Size([64, 48, 3, 3])
model.inception_blocks.8.conv_3x3.3.bias : torch.Size([64])
model.inception_blocks.8.conv_3x3.4.weight : torch.Size([64])
model.inception_blocks.8.conv_3x3.4.bias : torch.Size([64])
model.inception_blocks.8.conv_5x5.0.weight : torch.Size([16, 128, 1, 1])
model.inception_blocks.8.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.8.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.8.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.8.conv_5x5.3.weight : torch.Size([16, 16, 5, 5])
model.inception_blocks.8.conv_5x5.3.bias : torch.Size([16])
model.inception_blocks.8.conv_5x5.4.weight : torch.Size([16])
model.inception_blocks.8.conv_5x5.4.bias : torch.Size([16])
model.inception_blocks.8.max_pool.1.weight : torch.Size([16, 128, 1, 1])
model.inception_blocks.8.max_pool.1.bias : torch.Size([16])
model.inception_blocks.8.max_pool.2.weight : torch.Size([16])
model.inception_blocks.8.max_pool.2.bias : torch.Size([16])
model.inception_blocks.9.conv_1x1.0.weight : torch.Size([32, 128, 1, 1])
model.inception_blocks.9.conv_1x1.0.bias : torch.Size([32])
model.inception_blocks.9.conv_1x1.1.weight : torch.Size([32])
model.inception_blocks.9.conv_1x1.1.bias : torch.Size([32])
model.inception_blocks.9.conv_3x3.0.weight : torch.Size([48, 128, 1, 1])
model.inception_blocks.9.conv_3x3.0.bias : torch.Size([48])
model.inception_blocks.9.conv_3x3.1.weight : torch.Size([48])
model.inception_blocks.9.conv_3x3.1.bias : torch.Size([48])
model.inception_blocks.9.conv_3x3.3.weight : torch.Size([64, 48, 3, 3])
model.inception_blocks.9.conv_3x3.3.bias : torch.Size([64])
model.inception_blocks.9.conv_3x3.4.weight : torch.Size([64])
model.inception_blocks.9.conv_3x3.4.bias : torch.Size([64])
model.inception_blocks.9.conv_5x5.0.weight : torch.Size([16, 128, 1, 1])
model.inception_blocks.9.conv_5x5.0.bias : torch.Size([16])
model.inception_blocks.9.conv_5x5.1.weight : torch.Size([16])
model.inception_blocks.9.conv_5x5.1.bias : torch.Size([16])
model.inception_blocks.9.conv_5x5.3.weight : torch.Size([16, 16, 5, 5])
model.inception_blocks.9.conv_5x5.3.bias : torch.Size([16])
model.inception_blocks.9.conv_5x5.4.weight : torch.Size([16])
model.inception_blocks.9.conv_5x5.4.bias : torch.Size([16])
model.inception_blocks.9.max_pool.1.weight : torch.Size([16, 128, 1, 1])
model.inception_blocks.9.max_pool.1.bias : torch.Size([16])
model.inception_blocks.9.max_pool.2.weight : torch.Size([16])
model.inception_blocks.9.max_pool.2.bias : torch.Size([16])
model.output_net.2.weight : torch.Size([8, 128])
model.output_net.2.bias : torch.Size([8])


# ResNet
Trainer(
  (model): ResNet(
    (input_net): Sequential(
      (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (blocks): Sequential(
      (0): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
      (1): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
      (2): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
      (3): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
        (act_fn): ReLU()
      )
      (4): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
      (5): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
      (6): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
        (act_fn): ReLU()
      )
      (7): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
      (8): ResNetBlock(
        (net): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act_fn): ReLU()
      )
    )
    (output_net): Sequential(
      (0): AdaptiveAvgPool2d(output_size=(1, 1))
      (1): Flatten()
      (2): Linear(in_features=64, out_features=8, bias=True)
    )
  )
  (criterion): CrossEntropyLoss()
)

model.input_net.0.weight : torch.Size([16, 3, 3, 3])
model.input_net.1.weight : torch.Size([16])
model.input_net.1.bias : torch.Size([16])
model.blocks.0.net.0.weight : torch.Size([16, 16, 3, 3])
model.blocks.0.net.1.weight : torch.Size([16])
model.blocks.0.net.1.bias : torch.Size([16])
model.blocks.0.net.3.weight : torch.Size([16, 16, 3, 3])
model.blocks.0.net.4.weight : torch.Size([16])
model.blocks.0.net.4.bias : torch.Size([16])
model.blocks.1.net.0.weight : torch.Size([16, 16, 3, 3])
model.blocks.1.net.1.weight : torch.Size([16])
model.blocks.1.net.1.bias : torch.Size([16])
model.blocks.1.net.3.weight : torch.Size([16, 16, 3, 3])
model.blocks.1.net.4.weight : torch.Size([16])
model.blocks.1.net.4.bias : torch.Size([16])
model.blocks.2.net.0.weight : torch.Size([16, 16, 3, 3])
model.blocks.2.net.1.weight : torch.Size([16])
model.blocks.2.net.1.bias : torch.Size([16])
model.blocks.2.net.3.weight : torch.Size([16, 16, 3, 3])
model.blocks.2.net.4.weight : torch.Size([16])
model.blocks.2.net.4.bias : torch.Size([16])
model.blocks.3.net.0.weight : torch.Size([32, 16, 3, 3])
model.blocks.3.net.1.weight : torch.Size([32])
model.blocks.3.net.1.bias : torch.Size([32])
model.blocks.3.net.3.weight : torch.Size([32, 32, 3, 3])
model.blocks.3.net.4.weight : torch.Size([32])
model.blocks.3.net.4.bias : torch.Size([32])
model.blocks.3.downsample.weight : torch.Size([32, 16, 1, 1])
model.blocks.3.downsample.bias : torch.Size([32])
model.blocks.4.net.0.weight : torch.Size([32, 32, 3, 3])
model.blocks.4.net.1.weight : torch.Size([32])
model.blocks.4.net.1.bias : torch.Size([32])
model.blocks.4.net.3.weight : torch.Size([32, 32, 3, 3])
model.blocks.4.net.4.weight : torch.Size([32])
model.blocks.4.net.4.bias : torch.Size([32])
model.blocks.5.net.0.weight : torch.Size([32, 32, 3, 3])
model.blocks.5.net.1.weight : torch.Size([32])
model.blocks.5.net.1.bias : torch.Size([32])
model.blocks.5.net.3.weight : torch.Size([32, 32, 3, 3])
model.blocks.5.net.4.weight : torch.Size([32])
model.blocks.5.net.4.bias : torch.Size([32])
model.blocks.6.net.0.weight : torch.Size([64, 32, 3, 3])
model.blocks.6.net.1.weight : torch.Size([64])
model.blocks.6.net.1.bias : torch.Size([64])
model.blocks.6.net.3.weight : torch.Size([64, 64, 3, 3])
model.blocks.6.net.4.weight : torch.Size([64])
model.blocks.6.net.4.bias : torch.Size([64])
model.blocks.6.downsample.weight : torch.Size([64, 32, 1, 1])
model.blocks.6.downsample.bias : torch.Size([64])
model.blocks.7.net.0.weight : torch.Size([64, 64, 3, 3])
model.blocks.7.net.1.weight : torch.Size([64])
model.blocks.7.net.1.bias : torch.Size([64])
model.blocks.7.net.3.weight : torch.Size([64, 64, 3, 3])
model.blocks.7.net.4.weight : torch.Size([64])
model.blocks.7.net.4.bias : torch.Size([64])
model.blocks.8.net.0.weight : torch.Size([64, 64, 3, 3])
model.blocks.8.net.1.weight : torch.Size([64])
model.blocks.8.net.1.bias : torch.Size([64])
model.blocks.8.net.3.weight : torch.Size([64, 64, 3, 3])
model.blocks.8.net.4.weight : torch.Size([64])
model.blocks.8.net.4.bias : torch.Size([64])
model.output_net.2.weight : torch.Size([8, 64])
model.output_net.2.bias : torch.Size([8])


# DenseNet
Trainer(
  (model): DenseNet(
    (input_net): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (blocks): Sequential(
      (0): DenseBlock(
        (block): Sequential(
          (0): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (1): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(48, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (2): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (3): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(80, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (4): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (5): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(112, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
        )
      )
      (1): TransitionLayer(
        (transition): Sequential(
          (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (2): DenseBlock(
        (block): Sequential(
          (0): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (1): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(80, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (2): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (3): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(112, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (4): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (5): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
        )
      )
      (3): TransitionLayer(
        (transition): Sequential(
          (0): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (4): DenseBlock(
        (block): Sequential(
          (0): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(80, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (1): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (2): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(112, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (3): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (4): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (5): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(160, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
        )
      )
      (5): TransitionLayer(
        (transition): Sequential(
          (0): BatchNorm2d(176, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): Conv2d(176, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (6): DenseBlock(
        (block): Sequential(
          (0): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(88, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (1): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(104, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (2): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (3): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(136, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (4): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(152, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (5): DenseLayer(
            (net): Sequential(
              (0): BatchNorm2d(168, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): Conv2d(168, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
        )
      )
    )
    (output_net): Sequential(
      (0): BatchNorm2d(184, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
      (2): AdaptiveAvgPool2d(output_size=(1, 1))
      (3): Flatten()
      (4): Linear(in_features=184, out_features=8, bias=True)
    )
  )
  (criterion): CrossEntropyLoss()
)

model.input_net.0.weight : torch.Size([32, 3, 3, 3])
model.input_net.0.bias : torch.Size([32])
model.blocks.0.block.0.net.0.weight : torch.Size([32])
model.blocks.0.block.0.net.0.bias : torch.Size([32])
model.blocks.0.block.0.net.2.weight : torch.Size([32, 32, 1, 1])
model.blocks.0.block.0.net.3.weight : torch.Size([32])
model.blocks.0.block.0.net.3.bias : torch.Size([32])
model.blocks.0.block.0.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.0.block.1.net.0.weight : torch.Size([48])
model.blocks.0.block.1.net.0.bias : torch.Size([48])
model.blocks.0.block.1.net.2.weight : torch.Size([32, 48, 1, 1])
model.blocks.0.block.1.net.3.weight : torch.Size([32])
model.blocks.0.block.1.net.3.bias : torch.Size([32])
model.blocks.0.block.1.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.0.block.2.net.0.weight : torch.Size([64])
model.blocks.0.block.2.net.0.bias : torch.Size([64])
model.blocks.0.block.2.net.2.weight : torch.Size([32, 64, 1, 1])
model.blocks.0.block.2.net.3.weight : torch.Size([32])
model.blocks.0.block.2.net.3.bias : torch.Size([32])
model.blocks.0.block.2.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.0.block.3.net.0.weight : torch.Size([80])
model.blocks.0.block.3.net.0.bias : torch.Size([80])
model.blocks.0.block.3.net.2.weight : torch.Size([32, 80, 1, 1])
model.blocks.0.block.3.net.3.weight : torch.Size([32])
model.blocks.0.block.3.net.3.bias : torch.Size([32])
model.blocks.0.block.3.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.0.block.4.net.0.weight : torch.Size([96])
model.blocks.0.block.4.net.0.bias : torch.Size([96])
model.blocks.0.block.4.net.2.weight : torch.Size([32, 96, 1, 1])
model.blocks.0.block.4.net.3.weight : torch.Size([32])
model.blocks.0.block.4.net.3.bias : torch.Size([32])
model.blocks.0.block.4.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.0.block.5.net.0.weight : torch.Size([112])
model.blocks.0.block.5.net.0.bias : torch.Size([112])
model.blocks.0.block.5.net.2.weight : torch.Size([32, 112, 1, 1])
model.blocks.0.block.5.net.3.weight : torch.Size([32])
model.blocks.0.block.5.net.3.bias : torch.Size([32])
model.blocks.0.block.5.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.1.transition.0.weight : torch.Size([128])
model.blocks.1.transition.0.bias : torch.Size([128])
model.blocks.1.transition.2.weight : torch.Size([64, 128, 1, 1])
model.blocks.2.block.0.net.0.weight : torch.Size([64])
model.blocks.2.block.0.net.0.bias : torch.Size([64])
model.blocks.2.block.0.net.2.weight : torch.Size([32, 64, 1, 1])
model.blocks.2.block.0.net.3.weight : torch.Size([32])
model.blocks.2.block.0.net.3.bias : torch.Size([32])
model.blocks.2.block.0.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.2.block.1.net.0.weight : torch.Size([80])
model.blocks.2.block.1.net.0.bias : torch.Size([80])
model.blocks.2.block.1.net.2.weight : torch.Size([32, 80, 1, 1])
model.blocks.2.block.1.net.3.weight : torch.Size([32])
model.blocks.2.block.1.net.3.bias : torch.Size([32])
model.blocks.2.block.1.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.2.block.2.net.0.weight : torch.Size([96])
model.blocks.2.block.2.net.0.bias : torch.Size([96])
model.blocks.2.block.2.net.2.weight : torch.Size([32, 96, 1, 1])
model.blocks.2.block.2.net.3.weight : torch.Size([32])
model.blocks.2.block.2.net.3.bias : torch.Size([32])
model.blocks.2.block.2.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.2.block.3.net.0.weight : torch.Size([112])
model.blocks.2.block.3.net.0.bias : torch.Size([112])
model.blocks.2.block.3.net.2.weight : torch.Size([32, 112, 1, 1])
model.blocks.2.block.3.net.3.weight : torch.Size([32])
model.blocks.2.block.3.net.3.bias : torch.Size([32])
model.blocks.2.block.3.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.2.block.4.net.0.weight : torch.Size([128])
model.blocks.2.block.4.net.0.bias : torch.Size([128])
model.blocks.2.block.4.net.2.weight : torch.Size([32, 128, 1, 1])
model.blocks.2.block.4.net.3.weight : torch.Size([32])
model.blocks.2.block.4.net.3.bias : torch.Size([32])
model.blocks.2.block.4.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.2.block.5.net.0.weight : torch.Size([144])
model.blocks.2.block.5.net.0.bias : torch.Size([144])
model.blocks.2.block.5.net.2.weight : torch.Size([32, 144, 1, 1])
model.blocks.2.block.5.net.3.weight : torch.Size([32])
model.blocks.2.block.5.net.3.bias : torch.Size([32])
model.blocks.2.block.5.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.3.transition.0.weight : torch.Size([160])
model.blocks.3.transition.0.bias : torch.Size([160])
model.blocks.3.transition.2.weight : torch.Size([80, 160, 1, 1])
model.blocks.4.block.0.net.0.weight : torch.Size([80])
model.blocks.4.block.0.net.0.bias : torch.Size([80])
model.blocks.4.block.0.net.2.weight : torch.Size([32, 80, 1, 1])
model.blocks.4.block.0.net.3.weight : torch.Size([32])
model.blocks.4.block.0.net.3.bias : torch.Size([32])
model.blocks.4.block.0.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.4.block.1.net.0.weight : torch.Size([96])
model.blocks.4.block.1.net.0.bias : torch.Size([96])
model.blocks.4.block.1.net.2.weight : torch.Size([32, 96, 1, 1])
model.blocks.4.block.1.net.3.weight : torch.Size([32])
model.blocks.4.block.1.net.3.bias : torch.Size([32])
model.blocks.4.block.1.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.4.block.2.net.0.weight : torch.Size([112])
model.blocks.4.block.2.net.0.bias : torch.Size([112])
model.blocks.4.block.2.net.2.weight : torch.Size([32, 112, 1, 1])
model.blocks.4.block.2.net.3.weight : torch.Size([32])
model.blocks.4.block.2.net.3.bias : torch.Size([32])
model.blocks.4.block.2.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.4.block.3.net.0.weight : torch.Size([128])
model.blocks.4.block.3.net.0.bias : torch.Size([128])
model.blocks.4.block.3.net.2.weight : torch.Size([32, 128, 1, 1])
model.blocks.4.block.3.net.3.weight : torch.Size([32])
model.blocks.4.block.3.net.3.bias : torch.Size([32])
model.blocks.4.block.3.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.4.block.4.net.0.weight : torch.Size([144])
model.blocks.4.block.4.net.0.bias : torch.Size([144])
model.blocks.4.block.4.net.2.weight : torch.Size([32, 144, 1, 1])
model.blocks.4.block.4.net.3.weight : torch.Size([32])
model.blocks.4.block.4.net.3.bias : torch.Size([32])
model.blocks.4.block.4.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.4.block.5.net.0.weight : torch.Size([160])
model.blocks.4.block.5.net.0.bias : torch.Size([160])
model.blocks.4.block.5.net.2.weight : torch.Size([32, 160, 1, 1])
model.blocks.4.block.5.net.3.weight : torch.Size([32])
model.blocks.4.block.5.net.3.bias : torch.Size([32])
model.blocks.4.block.5.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.5.transition.0.weight : torch.Size([176])
model.blocks.5.transition.0.bias : torch.Size([176])
model.blocks.5.transition.2.weight : torch.Size([88, 176, 1, 1])
model.blocks.6.block.0.net.0.weight : torch.Size([88])
model.blocks.6.block.0.net.0.bias : torch.Size([88])
model.blocks.6.block.0.net.2.weight : torch.Size([32, 88, 1, 1])
model.blocks.6.block.0.net.3.weight : torch.Size([32])
model.blocks.6.block.0.net.3.bias : torch.Size([32])
model.blocks.6.block.0.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.6.block.1.net.0.weight : torch.Size([104])
model.blocks.6.block.1.net.0.bias : torch.Size([104])
model.blocks.6.block.1.net.2.weight : torch.Size([32, 104, 1, 1])
model.blocks.6.block.1.net.3.weight : torch.Size([32])
model.blocks.6.block.1.net.3.bias : torch.Size([32])
model.blocks.6.block.1.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.6.block.2.net.0.weight : torch.Size([120])
model.blocks.6.block.2.net.0.bias : torch.Size([120])
model.blocks.6.block.2.net.2.weight : torch.Size([32, 120, 1, 1])
model.blocks.6.block.2.net.3.weight : torch.Size([32])
model.blocks.6.block.2.net.3.bias : torch.Size([32])
model.blocks.6.block.2.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.6.block.3.net.0.weight : torch.Size([136])
model.blocks.6.block.3.net.0.bias : torch.Size([136])
model.blocks.6.block.3.net.2.weight : torch.Size([32, 136, 1, 1])
model.blocks.6.block.3.net.3.weight : torch.Size([32])
model.blocks.6.block.3.net.3.bias : torch.Size([32])
model.blocks.6.block.3.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.6.block.4.net.0.weight : torch.Size([152])
model.blocks.6.block.4.net.0.bias : torch.Size([152])
model.blocks.6.block.4.net.2.weight : torch.Size([32, 152, 1, 1])
model.blocks.6.block.4.net.3.weight : torch.Size([32])
model.blocks.6.block.4.net.3.bias : torch.Size([32])
model.blocks.6.block.4.net.5.weight : torch.Size([16, 32, 3, 3])
model.blocks.6.block.5.net.0.weight : torch.Size([168])
model.blocks.6.block.5.net.0.bias : torch.Size([168])
model.blocks.6.block.5.net.2.weight : torch.Size([32, 168, 1, 1])
model.blocks.6.block.5.net.3.weight : torch.Size([32])
model.blocks.6.block.5.net.3.bias : torch.Size([32])
model.blocks.6.block.5.net.5.weight : torch.Size([16, 32, 3, 3])
model.output_net.0.weight : torch.Size([184])
model.output_net.0.bias : torch.Size([184])
model.output_net.4.weight : torch.Size([8, 184])
model.output_net.4.bias : torch.Size([8])
